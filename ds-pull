#! /usr/bin/env bash

ROOT_DIR="$(dirname "$0")"
source "$ROOT_DIR"/util.sh || exit 1

function container_already_exists() {
	local container="$1"

	list_local_containers | grep -q "^$container$"
}

function ensure_tmp_dir() {
	local base_tmp_dir="$1"

	[ ! -d "$base_tmp_dir" ] && mkdir -p "$base_tmp_dir"
	return 0
}

function container_already_downloaded() {
	local container_file="$1"
	[ -f "$container_file" ]
}

function find_container() {
	local container="$1"
	list_remote_containers | grep "\b$container\b http.*"
}

function get_container_url() {
	awk '{print $2}'
}

function download_container() {
	local downloaded_location="$1"

	read container_url;

	curl -Lo "$downloaded_location" "$container_url"
}

function download() {
	local container="$1"
	local downloaded_location="$2"

	[ -f "$downloaded_location" ] && {
		warn 'The "%s" container has already been pulled before, "%s" will be reused' "$container" "$downloaded_location"
		warn 'If you want to pull the container again, please execute: rm -v "%s"' "$downloaded_location"
		solution_to_clipborad "rm -v $download_container"
		return 0
	}

	find_container "$container" | get_container_url | download_container "$downloaded_location"
}

function needs_to_move() {
	local actual="$1"
	local desired="2"
	[ "$actual" != "$desired" ]
}

function extract_container() {
	local from="$1"
	local to="$2"
	local desired_name="$3"

	container_root_in_tar=$(tar -tf "$from" | head -n 1)
	[ -z "$container_root_in_tar" ] && {
		error 'Unable to determine the root inside of the "%s" tar archive' "$from"
		return 1
	}

	local actual_container_location="$to"/"$container_root_in_tar"
	local desired_container_location="$to"/"$desired_name"

	tar -C "$to" -xf "$from" &&
		needs_to_move "$actual_container_location" "$desired_container_location" &&
		mv "$actual_container_location" "$desired_container_location"
}

container="$1"
desired_name="${2:-$container}"

base_tmp_dir=$(get_ds_tmp_dir)
img_dir=$(get_img_dir)

downloaded_location="$base_tmp_dir"/"$container".tgz

container_already_exists "$desired_name" && {
	warn 'The "%s" container already exists. No containers will be pulled' "$desired_name"
	exit 1
}

check_container_name "$container" &&
	ensure_tmp_dir "$base_tmp_dir" &&
	download "$container" "$downloaded_location" &&
	extract_container "$downloaded_location" "$img_dir" "$desired_name"
